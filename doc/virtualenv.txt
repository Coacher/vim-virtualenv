*virtualenv.txt*        Better Python virtual environments support for Vim.

==============================================================================
CONTENTS                                    *virtualenv-contents*

    1. Introduction.........................|virtualenv-introduction|
    2. Commands.............................|virtualenv-commands|
    3. Configuration........................|virtualenv-configuration|
    4. The 'statusline' flag................|virtualenv-statusline|
    5. Functions............................|virtualenv-functions|
    6. About................................|virtualenv-about|
    7. License..............................|virtualenv-license|

==============================================================================
INTRODUCTION                                *virtualenv-introduction*

*vim-virtualenv* plugin provides a simple way to activate and deactivate
Python virtual environments created by the "virtualenv"
(https://github.com/pypa/virtualenv) or "venv"
(https://docs.python.org/3/library/venv.html) tools from a Vim session as well
as synchronizes the Vim internal Python "sys.path" variable with an already
active virtual environment. It requires |if_pyth|.

This plugin distinguishes between internal and external virtualenvs. The
internal one is a virtual environment that was not activated prior to the Vim
session start, i.e. it is activated from the Vim session. The external one is
a virtual environment that was activated before the Vim session start, i.e.
the Vim session is started inside this virtual environment.

==============================================================================
COMMANDS                                    *virtualenv-commands*

:VirtualEnvList [path]                      *:VirtualEnvList*
    List virtualenvs located inside the "path" directory.
    If "path" is not specified, then the value of |g:virtualenv#directory|
    variable is used.

:VirtualEnvActivate [name]                  *:VirtualEnvActivate*
    Activate the "name" virtualenv located inside |g:virtualenv#directory|.
    Alternatively "name" can be an absolute or a relative path to the
    virtualenv directory, in the latter case it is first expanded against
    |g:virtualenv#directory| and then against the current directory.

    If "name" is not specified and there is no external virtualenv present,
    then vim-virtualenv searches from the directory of the current file
    upwards until it finds a virtualenv.
    If "name" is not specified and there is an external virtualenv present,
    then vim-virtualenv synchronizes the Vim internal Python "sys.path"
    variable with it.

:VirtualEnvCD                               *:VirtualEnvCD*
    Change the current directory to the currently active virtualenv directory.

:VirtualEnvDeactivate                       *:VirtualEnvDeactivate*
    Deactivate the currently active virtualenv.

==============================================================================
CONFIGURATION                               *virtualenv-configuration*

g:virtualenv#directory                      *g:virtualenv#directory*
    This variable references the directory that holds virtualenvs.

    If $WORKON_HOME environment variable is set, it is used as default value.
    Otherwise, default value is |v:null|.

    Example: >
        let g:virtualenv#directory = '/path/to/virtualenvs'
<
g:virtualenv#auto_activate                  *g:virtualenv#auto_activate*
    This variable controls whether vim-virtualenv should attempt to determine
    and activate a virtualenv based on the current file path on file open in
    the case where the directory of the current file is inside
    |g:virtualenv#directory|.

    Default value is 1.

                                        *g:virtualenv#auto_activate_everywhere*
g:virtualenv#auto_activate_everywhere
    This variable controls whether vim-virtualenv should always attempt to
    determine and activate a virtualenv based on the current file path on file
    open.

    Note: This variable overrides |g:virtualenv#auto_activate|.

    Default value is 0.

g:virtualenv#update_pythonpath              *g:virtualenv#update_pythonpath*
    This variable controls whether vim-virtualenv should update $PYTHONPATH
    environment variable on virtualenv activation. The original $PYTHONPATH
    value is restored on deactivation.

    Default value is 1.

                                        *g:virtualenv#cdvirtualenv_on_activate*
g:virtualenv#cdvirtualenv_on_activate
    This variable controls whether vim-virtualenv should change the current
    directory to the virtualenv directory on activation.

    Default value is 1.

g:virtualenv#return_on_deactivate           *g:virtualenv#return_on_deactivate*
    This variable controls whether vim-virtualenv should restore the current
    directory to its original value on virtualenv deactivation.

    Default value is 1.

g:virtualenv#statusline_format              *g:virtualenv#statusline_format*
    This variable sets the format string for the |virtualenv#statusline()|
    function output. Any '%n' flag will be replaced with the name of the
    currently active virtualenv.

    Default value is '%n'.

    Example: >
        let g:virtualenv#statusline_format = '[%n]'
<
g:virtualenv#force_python_version           *g:virtualenv#force_python_version*
    This variable forces vim-virtualenv to use the specified version of the
    |python| command and skip the Python version check for the virtualenv.
    Accepted values are '2' and '3' for |:python| and |:python3| commands,
    respectively.

    Undefined by default.

g:virtualenv#debug                          *g:virtualenv#debug*
    This variable controls whether vim-virtualenv should print warning
    messages.

    Default value is 0.

                                        *g:virtualenv#enable_gutentags_support*
g:virtualenv#enable_gutentags_support
    This variable controls whether vim-virtualenv should provide a custom
    project root finder for |gutentags|. This project root finder returns the
    currently active virtualenv directory when working inside one and falls
    back to `gutentags#default_get_project_root` otherwise.

    Note: This feature requires |gutentags| plugin.

    Default value is 0.

==============================================================================
STATUSLINE                                  *virtualenv-statusline*

Name of the currently active virtualenv can be shown in the |'statusline'|, or
in any other place, by calling the |virtualenv#statusline()| function. The
output is controlled by the |g:virtualenv#statusline_format| variable.

==============================================================================
FUNCTIONS                                   *virtualenv-functions*

virtualenv#init()                           *virtualenv#init()*
    Initialize vim-virtualenv plugin: normalize |g:virtualenv#directory| value
    and update $WORKON_HOME environment variable.

virtualenv#activate([{target}])             *virtualenv#activate()*
    Autoload function that provides |:VirtualEnvActivate| command
    functionality. This is a wrapper around |virtualenv#force_activate()|.

                                            *virtualenv#force_activate()*
virtualenv#force_activate({target} [, {internal}])
    Activate the virtualenv located inside the {target} directory.
    The optional {internal} argument must be given and be equal to "external"
    in order to activate an external virtualenv.

virtualenv#deactivate()                     *virtualenv#deactivate()*
    Autoload function that provides |:VirtualEnvDeactivate| command
    functionality. This is a wrapper around |virtualenv#force_deactivate()|.

virtualenv#force_deactivate()               *virtualenv#force_deactivate()*
    Deactivate the currently active virtualenv.
    For an external virtualenv this only restores original "sys.path" value.

virtualenv#cdvirtualenv()                   *virtualenv#cdvirtualenv()*
    Autoload function that provides |:VirtualEnvCD| command functionality.

virtualenv#list([{directory}])              *virtualenv#list()*
    Autoload function that provides |:VirtualEnvList| command functionality.
    This is a wrapper around |virtualenv#find()|.

                                            *virtualenv#find()*
virtualenv#find({target} [, {pattern}])
    Return a list of virtualenvs located inside the {target} directory.
    If the optional {pattern} argument is given, then only virtualenvs that
    match it are returned. {pattern} can be any pattern acceptable by
    |globpath()|.

virtualenv#statusline()                     *virtualenv#statusline()*
    Return the currently active virtualenv name or "" if there is none.
    See also |virtualenv-statusline|.

virtualenv#origin({target})                 *virtualenv#origin()*
    Search from the {target} directory upwards until a virtualenv is found.
    Return the found virtualenv directory or "" if none was found.

virtualenv#state([{variable}])              *virtualenv#state()*
    Echo the internal plugin state.
    If the optional {variable} argument is given, then echo the value of
    {variable} only.

==============================================================================
ABOUT                                       *virtualenv-about*

Author:                         Ilya Tumaykin <itumaykin(at)gmail(dot)com>
Original author:                Jeremy Cantrell <jmcantrell@gmail.com>

Find the latest version of vim-virtualenv at:

https://github.com/Coacher/vim-virtualenv

Original version can be found at:

https://github.com/jmcantrell/vim-virtualenv

==============================================================================
LICENSE                                     *virtualenv-license*

vim-virtualenv is released under the Vim License.
See |license|.

vim:tw=78:sw=4:ft=help:norl:
